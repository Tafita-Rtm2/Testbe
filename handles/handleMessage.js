const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { sendMessage } = require('./sendMessage');

const commands = new Map();
const userStates = new Map(); // Suivi des Ã©tats des utilisateurs et du mode de commande verrouillÃ©e
const userSubscriptions = new Map(); // Enregistre les abonnements utilisateurs avec une date d'expiration
const userFreeQuestions = new Map(); // Enregistre le nombre de questions gratuites par utilisateur par jour
const validCodes = ["2201", "1206", "0612", "1212", "2003"];
const subscriptionDuration = 30 * 24 * 60 * 60 * 1000; // DurÃ©e de l'abonnement : 30 jours en millisecondes

// Charger les commandes
const commandFiles = fs.readdirSync(path.join(__dirname, '../commands')).filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
  const command = require(`../commands/${file}`);
  commands.set(command.name, command);
}

// Fonction principale pour gÃ©rer les messages entrants
async function handleMessage(event, pageAccessToken) {
  const senderId = event.sender.id;
  const messageText = event.message.text.trim().toLowerCase();

  // GÃ©rer la commande spÃ©ciale 'stop' pour quitter le mode verrouillÃ©
  if (messageText === 'stop') {
    userStates.delete(senderId); // Supprimer l'Ã©tat verrouillÃ©
    return await sendMessage(senderId, { text: "Vous avez quittÃ© le mode commande verrouillÃ©e." }, pageAccessToken);
  }

  // GÃ©rer la commande 'help'
  if (messageText === 'help') {
    return await sendHelpMessage(senderId, pageAccessToken);
  }

  // VÃ©rifier si l'utilisateur est en mode de commande verrouillÃ©e
  const userState = userStates.get(senderId);
  if (userState && userState.lockedCommand) {
    return await executeLockedCommand(senderId, messageText, pageAccessToken);
  }

  // VÃ©rifier si l'utilisateur envoie une commande initiale pour activer le mode verrouillÃ©
  const args = messageText.split(' ');
  const commandName = args.shift().toLowerCase();
  const command = commands.get(commandName);

  if (command) {
    // Activer le mode verrouillÃ© pour cette commande
    userStates.set(senderId, { lockedCommand: commandName });
    await sendMessage(senderId, { text: `Commande '${commandName}' activÃ©e en mode verrouillÃ©. Tapez 'stop' pour quitter.` }, pageAccessToken);
    return await command.execute(senderId, args, pageAccessToken, sendMessage);
  }

  // Si aucune commande trouvÃ©e, envoyer un message d'erreur
  await sendMessage(senderId, { text: "Commande non reconnue. Tapez 'help' pour voir la liste des commandes disponibles." }, pageAccessToken);
}

// Fonction pour envoyer la liste des commandes disponibles
async function sendHelpMessage(senderId, pageAccessToken) {
  let helpText = "ðŸ‡«ðŸ‡·ðŸ‡²ðŸ‡¬ **Commandes Disponibles** ðŸ“œ\n\n";
  commands.forEach((command, name) => {
    helpText += `ðŸŒŸ **${name.toUpperCase()}**\n   â¤· **Description**: ${command.description || "Aucune description"}\n`;
    helpText += "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n";
  });
  helpText += "\nðŸ’¡ Tapez une commande pour l'activer. Utilisez 'stop' pour quitter une commande verrouillÃ©e.";

  await sendMessage(senderId, { text: helpText }, pageAccessToken);
}

// Fonction pour exÃ©cuter la commande verrouillÃ©e
async function executeLockedCommand(senderId, messageText, pageAccessToken) {
  const userState = userStates.get(senderId);
  const lockedCommandName = userState.lockedCommand;
  const command = commands.get(lockedCommandName);

  if (command) {
    try {
      await command.execute(senderId, [messageText], pageAccessToken, sendMessage);
    } catch (error) {
      console.error(`Erreur lors de l'exÃ©cution de la commande verrouillÃ©e ${lockedCommandName}:`, error);
      await sendMessage(senderId, { text: `Erreur lors de l'exÃ©cution de la commande ${lockedCommandName}.` }, pageAccessToken);
    }
  } else {
    await sendMessage(senderId, { text: "Erreur : La commande verrouillÃ©e n'est pas disponible." }, pageAccessToken);
  }
}

// Fonction pour gÃ©rer les abonnements et les questions gratuites (ajoutez vos autres fonctions de gestion ici)

// Exporter la fonction handleMessage pour l'utiliser dans l'application
module.exports = { handleMessage };
